# -*- coding: utf-8 -*-
"""Лаб-ная работа №1 "Нейронной сети.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n9RAXNoGUbx2nn0PX_UB64GZIHumNT-h

# **Задание 1**
"""

from random import randint

def w_random(n = 2):
  return [randint(1, 100) / 100 for _ in range(n)]

w = w_random()
print(w)

"""# **Задание 2**"""

def print_predict(x_train):
  for i in x_train:
    print(predict(i))

"""# **Задание 3** (***Конъюнкция***)"""

from random import randint
speed = 0.3

w = w_random()
x_train = [[1, 1], [1, 0], [0, 1], [0, 0]]
y_train = [1, 0, 0, 0]

def print_start_w(w):
  print(f"Стартовые веса: {w}")

print_start_w(w)

def predict(x_train):
  summator = x_train[0] * w[0] + x_train[1] * w[1]
  act = 1 if summator >= 1 else 0
  return act

def print_predict(x_train):
  for i in x_train:
    print(predict(i))

def train(x_train, y_train, w):
  for i in range(len(x_train)):
    error = y_train[i] - predict([x_train[i][0], x_train[i][1]])
    if error != 0:
      w[0] = w[0] + error * x_train[i][0] * speed
      w[1] = w[1] + error * x_train[i][1] * speed
    print(w, error, y_train[i])

def epoch(count, train, x_train, y_train, w):
  print(f"Параметры весов:\n")
  for i in range(count):
    train(x_train, y_train, w)
    print("------------")

epoch(2, train, x_train, y_train, w)
print("\nКонечные веса: ",w)

def otchot(n, bool, count, w):
  print(f"Точность модели на старте: {n}")
  print(f"Возможно ли обучить нейрон для получения 100% точности: {bool}")
  print(f"Сколько потребовалось эпох для обучения: {count}")
  print(f"Итоговые веса: {w}")

otchot(0, "YES", 1, w)

print_predict(x_train)

"""# **Задание 3** (***Дизъюнкция***)"""

from random import randint
speed = 0.3

w = w_random()
x_train = [[1, 1], [1, 0], [0, 1], [0, 0]]
y_train = [1, 1, 1, 0]
print_start_w(w)

epoch(5, train, x_train, y_train, w)
print("\nКонечные веса: ",w)

otchot(5, "YES", 3, w)

print_predict(x_train)

"""# **Задание 3** (***XOR***)"""

from random import randint
from random import randint
speed = 0.3
w = [1, -1]

x_train = [[1, 1], [1, 0], [0, 1], [0, 0]]
y_train = [0, 1, 1, 0]

print_start_w(w)

def predict(x_train):
  summator = x_train[0] * w[0] + x_train[1] * w[1]
  act = abs(summator)
  act = 1 if act >= 0.5 else 0
  return act

epoch(10, train, x_train, y_train, w)
print("\nКонечные веса: ",w)

otchot(0, "YES", 1, w)

print(predict([1,1]))
print(predict([1,0]))
print(predict([0,1]))
print(predict([0,0]))

"""# **Задание 3** (***конъюнкция отрицания x1 и x2***)"""

from random import randint
speed = 0.3

w = w_random()
x_train = [[1, 1], [1, 0], [0, 1], [0, 0]]
y_train = [0, 0, 1, 0]

print_start_w(w)

epoch(10, train, x_train, y_train, w)
print("\nКонечные веса: ",w)

otchot(2, "YES", 2, w)

print_predict(x_train)

"""# **Задание 3** (***конъюнкция x1 и отрицания x2***)"""

from random import randint
speed = 0.3

w = w_random()
x_train = [[1, 1], [1, 0], [0, 1], [0, 0]]
y_train = [0, 1, 0, 0]

print_start_w(w)

epoch(5, train, x_train, y_train, w)
print("\nКонечные веса: ",w)

otchot(2, "YES", 2, w)

print_predict(x_train)

"""# **Задание 4**"""

from random import randint
speed = 0.05

w = w_random()
x_train = [[1, 1], [1, -1], [-1, 1], [-1, -1]]
y_train = [1, -1, -1, -1]

print_start_w(w)

def predict4(x_train):
  summator = x_train[0] * w[0] + x_train[1] * w[1]
  act = 1 if summator >= 0 else -1
  return act

def train4(x_train, y_train, w):
  for i in range(len(x_train)):
    error = y_train[i] - predict4([x_train[i][0], x_train[i][1]])
    if error != 0:
      w[0] = w[0] + error * x_train[i][0] * speed
      w[1] = w[1] + error * x_train[i][1] * speed
    print(w, error, y_train[i])

def epoch(count, train, x_train, y_train, w):
  print(f"Параметры весов:\n")
  for i in range(count):
    train(x_train, y_train, w)
    print("------------")

epoch(10, train, x_train, y_train, w)
print("\nКонечные веса: ",w)

print(predict4([1, 1]))
print(predict4([1, -1]))
print(predict4([-1, 1]))
print(predict4([-1, -1]))

"""не возможно обучить нейрон с указанными параметрами. коэффициент скорости 0.05

# **Задание 5**
"""

from random import randint
speed = 0.1

w = w_random(3)
x_train = [[1, 1, 1], [1, -1, 1], [-1, 1, 1], [-1, -1, 1]]
y_train = [1, -1, -1, -1]

print_start_w(w)

def predict5(x_train):
  summator = x_train[0] * w[0] + x_train[1] * w[1] + x_train[2] * w[2]
  act = 1 if summator >= 0 else -1
  return act

def train4(x_train, y_train, w):
  for i in range(len(x_train)):
    error = y_train[i] - predict4([x_train[i][0], x_train[i][1]])
    if error != 0:
      w[0] = w[0] + error * x_train[i][0] * speed
      w[1] = w[1] + error * x_train[i][1] * speed
      w[2] = w[2] + error * x_train[i][2] * speed
    print(w, error, y_train[i])

def epoch(count, train, x_train, y_train, w):
  print(f"Параметры весов:\n")
  for i in range(count):
    train(x_train, y_train, w)
    print("------------")

epoch(50, train, x_train, y_train, w)
print("\nКонечные веса: ",w)

print(predict5([1, 1, 1]))
print(predict5([1, -1, 1]))
print(predict5([-1, 1, 1]))
print(predict5([-1, -1, 1]))

"""Не получилось обучить нейрон с параметрами из 4 задания

# **Задание 6** (***XOR***)
"""

from random import randint
speed = 0.3

w1 = w_random()
w2 = w_random()
w3 = w_random()
x_train = [[1, 1], [1, 0], [0, 1], [0, 0]]
y_train1 = [0, 0, 1, 0]
y_train2 = [0, 1, 0, 0]
y_train3 = [0, 1, 1, 0]
print(f"Стартовые веса: {w1}, {w2}, {w3}")

def predict_xor(x_train, w):
  summator = x_train[0] * w[0] + x_train[1] * w[1]
  act = 1 if summator >= 1 else 0
  return act

def train_xor(x_train, y_train, w):
  for i in range(len(x_train)):
    error = y_train[i] - predict_xor([x_train[i][0], x_train[i][1]], w)
    if error != 0:
      w[0] = w[0] + error * x_train[i][0] * speed
      w[1] = w[1] + error * x_train[i][1] * speed
    print(w, error, y_train[i])

def epoch_xor(count, train, x_train,y_train1, y_train2, y_train3, w1, w2, w3):
  print(f"Параметры весов:\n")
  for i in range(count):
    train_xor(x_train, y_train1, w1)
    print("\n")
    train_xor(x_train, y_train2, w2)
    print("\n")
    x_prom = []
    for i in range(len(x_train)):
      x_prom.append([])
      x_prom[i].append(predict_xor(x_train[i], w1))
      x_prom[i].append(predict_xor(x_train[i], w2))
    
    train_xor(x_prom, y_train3, w3)
    print("-------------------------------------------")

epoch_xor(10, train, x_train, y_train1, y_train2, y_train3, w1, w2, w3)
print("\nКонечные веса: ",w1, "\n", w2, "\n", w3)

print(f"Точность модели на старте: {0}")
print(f"Возможно ли обучить нейрон для получения 100% точности: YES")
print(f"Сколько потребовалось эпох для обучения: {1}")
print(f"Итоговые веса: {w1}")
print(f"Итоговые веса: {w2}")
print(f"Итоговые веса: {w3}")

print(predict_xor([predict_xor([1, 1], w1), predict_xor([1, 1], w2)], w3))
print(predict_xor([predict_xor([1, 0], w1), predict_xor([1, 0], w2)], w3))
print(predict_xor([predict_xor([0, 1], w1), predict_xor([0, 1], w2)], w3))
print(predict_xor([predict_xor([0, 0], w1), predict_xor([0, 0], w2)], w3))